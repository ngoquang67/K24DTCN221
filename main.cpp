#include "AuthService.h"
#include "WalletService.h"
#include "DataStorage.h"
#include <iostream>
#include <filesystem>

void showMainMenu() {
    std::cout << "\n=== Reward Points System ===\n";
    std::cout << "1. Register\n2. Login\n3. Exit\n";
    std::cout << "Choose an option: ";
}

void showUserMenu(UserAccount& user) {
    std::cout << "\n=== User Menu (" << user.username << ") ===\n";
    std::cout << "1. View Profile\n2. Update Profile\n3. Change Password\n";
    std::cout << "4. View Balance\n5. Transfer Points\n6. View Transaction History\n";
    if (user.role == UserRole::ADMIN_USER) {
        std::cout << "7. Admin: List Users\n8. Admin: Create User\n9. Admin: Deposit Points\n";
        std::cout << "10. Admin: Lock/Unlock User\n";
    }
    std::cout << "11. Logout\n";
    std::cout << "Choose an option: ";
}

int main() {
    std::filesystem::create_directories("data/backups");
    UserAccount currentUser;
    bool isLoggedIn = false;

    while (true) {
        if (!isLoggedIn) {
            showMainMenu();
            int choice;
            std::cin >> choice;
            std::cin.ignore();
            if (choice == 1) {
                std::string username, password, fullName, email, phone;
                std::cout << "Enter username: ";
                std::getline(std::cin, username);
                std::cout << "Enter password (leave empty for auto-generated): ";
                std::getline(std::cin, password);
                bool autoPass = password.empty();
                if (autoPass) password = Utils::generateSalt().substr(0, 12);
                std::cout << "Enter full name: ";
                std::getline(std::cin, fullName);
                std::cout << "Enter email: ";
                std::getline(std::cin, email);
                std::cout << "Enter phone: ";
                std::getline(std::cin, phone);
                AuthService::registerUser(username, password, fullName, email, phone, UserRole::REGULAR_USER, autoPass);
            } else if (choice == 2) {
                std::string username, password;
                std::cout << "Enter username: ";
                std::getline(std::cin, username);
                std::cout << "Enter password: ";
                std::getline(std::cin, password);
                if (AuthService::login(username, password, currentUser)) {
                    isLoggedIn = true;
                    if (currentUser.isPasswordAutoGenerated) {
                        std::cout << "Auto-generated password detected. You must change your password.\n";
                        std::string newPassword;
                        std::cout << "Enter new password: ";
                        std::getline(std::cin, newPassword);
                        AuthService::changePassword(currentUser, password, newPassword);
                    }
                }
            } else if (choice == 3) {
                break;
            }
        } else {
            showUserMenu(currentUser);
            int choice;
            std::cin >> choice;
            std::cin.ignore();
            if (choice == 1) {
                std::cout << "Username: " << currentUser.username << "\n";
                std::cout << "Full Name: " << currentUser.fullName << "\n";
                std::cout << "Email: " << currentUser.email << "\n";
                std::cout << "Phone: " << currentUser.phoneNumber << "\n";
                std::cout << "Role: " << (currentUser.role == UserRole::ADMIN_USER ? "Admin" : "Regular") << "\n";
            } else if (choice == 2) {
                std::string fullName, email, phone;
                std::cout << "Enter new full name: ";
                std::getline(std::cin, fullName);
                std::cout << "Enter new email: ";
                std::getline(std::cin, email);
                std::cout << "Enter new phone: ";
                std::getline(std::cin, phone);
                std::string otp = AuthService::generateOtp(currentUser);
                std::cout << "Enter OTP to confirm: ";
                std::string inputOtp;
                std::getline(std::cin, inputOtp);
                if (AuthService::verifyOtp(currentUser, inputOtp)) {
                    currentUser.fullName = fullName;
                    currentUser.email = email;
                    currentUser.phoneNumber = phone;
                    currentUser.updatedAt = std::chrono::system_clock::now();
                    auto users = DataStorage::loadUsers();
                    users[currentUser.username] = currentUser;
                    DataStorage::saveUsers(users);
                    std::cout << "Profile updated successfully.\n";
                } else {
                    std::cout << "Invalid OTP.\n";
                }
            } else if (choice == 3) {
                std::string oldPassword, newPassword;
                std::cout << "Enter old password: ";
                std::getline(std::cin, oldPassword);
                std::cout << "Enter new password: ";
                std::getline(std::cin, newPassword);
                AuthService::changePassword(currentUser, oldPassword, newPassword);
            } else if (choice == 4) {
                std::cout << "Balance: " << WalletService::getBalance(currentUser.walletId) << " points\n";
            } else if (choice == 5) {
                long long toWalletId;
                double amount;
                std::cout << "Enter destination wallet ID: ";
                std::cin >> toWalletId;
                std::cout << "Enter amount to transfer: ";
                std::cin >> amount;
                std::cin.ignore();
                WalletService::transferPoints(currentUser, toWalletId, amount);
            } else if (choice == 6) {
                auto history = WalletService::getTransactionHistory(currentUser.walletId);
                for (const auto& record : history) {
                    std::cout << "Transaction ID: " << record.transactionId
                              << ", From: " << record.fromWalletId
                              << ", To: " << record.toWalletId
                              << ", Amount: " << record.amount
                              << ", Time: " << Utils::time_point_to_string(record.timestamp)
                              << ", Status: " << (record.isSuccessful ? "Success" : "Failed") << "\n";
                }
            } else if (choice == 7 && currentUser.role == UserRole::ADMIN_USER) {
                auto users = DataStorage::loadUsers();
                for (const auto& pair : users) {
                    std::cout << "Username: " << pair.first << ", Role: "
                              << (pair.second.role == UserRole::ADMIN_USER ? "Admin" : "Regular")
                              << ", Locked: " << (pair.second.isLocked ? "Yes" : "No") << "\n";
                }
            } else if (choice == 8 && currentUser.role == UserRole::ADMIN_USER) {
                std::string username, password, fullName, email, phone;
                std::cout << "Enter username: ";
                std::getline(std::cin, username);
                std::cout << "Enter password (leave empty for auto-generated): ";
                std::getline(std::cin, password);
                bool autoPass = password.empty();
                if (autoPass) password = Utils::generateSalt().substr(0, 12);
                std::cout << "Enter full name: ";
                std::getline(std::cin, fullName);
                std::cout << "Enter email: ";
                std::getline(std::cin, email);
                std::cout << "Enter phone: ";
                std::getline(std::cin, phone);
                AuthService::registerUser(username, password, fullName, email, phone, UserRole::REGULAR_USER, autoPass);
            } else if (choice == 9 && currentUser.role == UserRole::ADMIN_USER) {
                long long toWalletId;
                double amount;
                std::cout << "Enter wallet ID to deposit: ";
                std::cin >> toWalletId;
                std::cout << "Enter amount to deposit: ";
                std::cin >> amount;
                std::cin.ignore();
                WalletService::adminDeposit(currentUser, toWalletId, amount);
            } else if (choice == 10 && currentUser.role == UserRole::ADMIN_USER) {
                std::string username;
                bool lock;
                std::cout << "Enter username to lock/unlock: ";
                std::getline(std::cin, username);
                std::cout << "Lock (1) or Unlock (0): ";
                std::cin >> lock;
                std::cin.ignore();
                auto users = DataStorage::loadUsers();
                if (users.find(username) != users.end()) {
                    users[username].isLocked = lock;
                    users[username].updatedAt = std::chrono::system_clock::now();
                    DataStorage::saveUsers(users);
                    std::cout << "User " << (lock ? "locked" : "unlocked") << " successfully.\n";
                } else {
                    std::cout << "User not found.\n";
                }
            } else if (choice == 11) {
                isLoggedIn = false;
                std::cout << "Logged out.\n";
            }
        }
    }
    return 0;
}